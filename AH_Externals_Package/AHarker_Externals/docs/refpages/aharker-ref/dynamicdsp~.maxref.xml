<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<?xml-stylesheet href='./_c74_ref.xsl' type='text/xsl'?>
<c74object name="dynamicdsp~" module="AHarker Externals" category="Dynamic_Suite">
  <digest>
      Dynamic patch management and advanced audio multithreading
  </digest>
  <description>
      <o>dynamicdsp~</o> is a multithreaded audio processing object for dynamically loading and managing audio (or non-audio) patches in realtime, without affecting other patches that are processing. It can be thought of as a <o>poly~</o> alternative, with more extensive multithreading and dynamic loading and routing features, but lacking some of the other features of <o>poly~</o> (such as down and up sampling). There is an associated set of objects for audio input / output and querying and setting patch state (<o>dynamic.in~</o> / <o>dynamic.out~</o> / <o>dynamic.request~</o> / <o>dynamic.this~</o> / <o>dynamic.patch~</o>).

  </description>
  <objarglist>
      <objarg name="patch_name" optional="1" type="symbol">
          <digest>
              Set default patch
          </digest>
          <description>
              The first argument sets the inital patch to load by setting its name as a <m>symbol</m>. This will only load one instance of the patch.
          </description>
      </objarg>
      <objarg name="inlets/outlets" optional="1" type="list">
          <digest>
              Set the number of inlets and outlets
          </digest>
          <description>
              If you wish to declare a number of inlets /outlets different from the default, the next arguments should be a set of up to 4 ints to set:
              <br />
              number of signal inlets (shared with message inlets)
              <br />
              number of signal outlets
              <br />
              number of message inlets (shared with signal inlets)
              <br />
              number of message outlets
          </description>
      </objarg>
      <objarg name="args" optional="1" type="list">
          <digest>
              Set arguments for the loaded patch
          </digest>
          <description>
              If you wish to provide arguments to the loaded patch then the next argument should be the <m>symbol</m> "args" followed by up to 10 arguments to the patch. These are applied  only to the patch loaded at instantiation.
          </description>
      </objarg>
  </objarglist>
  
  <methodlist>
      <method name="message">
          <arglist>
              <arg name="message" type="message" />
          </arglist>
          <digest>
              Input a message
          </digest>
          <description>
              A <m>message</m> can be sent into any of the <m>message</m> inlets specified by the message inlets argument. This will be sent to all targeted slots in parallel. The <m>message</m> should be recieved by an <o>in</o> (matching the inlet it was sent to) inside the loaded patch.
          </description>
      </method>
      <method name="signal">
          <arglist>
              <arg name="signal" type="signal" />
          </arglist>
          <digest>
              Input a signal
          </digest>
          <description>
              A <m>signal</m> can be sent into any of the <m>signal</m> inlets specified by the signal inlets argument. This will be sent to all available slots in parallel. The <m>signal</m> should be recieved by a <o>dynamic.in~</o> or <o>dynamic.request~</o> (matching the inlet it was sent to) inside the loaded patch.
          </description>
      </method>
      <method name="activethreads">
          <arglist>
              <arg name="activethreads" type="message" />
          </arglist>
          <digest>
              Set the number of active threads
          </digest>
          <description>
              The <m>activethreads</m> message followed by an <m>int</m> can be used to set the number of active threads. This is internally limited to the number of cores available on the hardware.
          </description>
      </method>
      <method name="autoloadbalance">
          <arglist>
              <arg name="autoloadbalance" type="message" />
          </arglist>
          <digest>
              Switch automatic load balancing on/off
          </digest>
          <description>
              The <m>autoloadbalance</m> message followed by an <m>int</m> can be used to switch automatic load balancing on(1)/off(0) (defaults to off).
              <br />
              When on, each patch runs on whichever thread becomes available to process it first. When off, each patch is linked statically to a thread, as determined by the <m>threadmap</m>.
              <br />
              Automatic load balancing has slightly more overhead, but may result in better cpu usage in siuations where the processing load of each patch is varying in an unpredicatble way, or when there are other changing demands on the hardware. The ideal situation is for all threads to be under equal load to give the most efficient use of cpu power.
          </description>
      </method>
      <method name="clear">
          <arglist>
              <arg name="clear" type="message" />
          </arglist>
          <digest>
              Clear all slots
          </digest>
          <description>
              Sending the <m>clear</m> message will clear all the currently occupied slots within the <o>dynamicdsp~</o>.
          </description>
      </method>
      <method name="deletepatch">
          <arglist>
              <arg name="deletepatch" type="message" />
          </arglist>
          <digest>
              Delete a patch from a specific slot
          </digest>
          <description>
              Sending the <m>deletepatch</m> message followed by an <m>int</m> will delete the patch from that slot within the <o>dynamicdsp~</o>.
          </description>
      </method>
      <method name="loadpatch">
          <arglist>
              <arg name="loadpatch" type="message" />
          </arglist>
          <digest>
              Load a patch into a free slot
          </digest>
          <description>
              The <m>loadpatch</m> message is used to load a patch into <o>dynamicdsp~</o>.
              Patches are loaded by sending messages to the object. Each patch is loaded into a slot which can be refered to by index number (from 1). The index number of the slot is available within the hosted patch using either the <o>dynamic.this~</o> or <o>dynamic.patch~</o> objects.
              <br />
              To load a patch into the next free slot, the <m>loadpatch</m> message can be followed by the name of a patch to load as a <m>symbol</m>.
              <br />
              <br />
              Two optional <m>ints</m> before the name of the patch can be used to specify the slot in which to load the patch (replacing any patch already loaded in that slot) followed by the audio processing thread to assign the patch to.
              <br />
              <br />
              Additional <m>ints</m> can be specified after the name of the patch to pass as arguments to the patch to be loaded.
              <br />
              <br />
              Each slot in <o>dynamicdsp~</o> can contain a different patch by changing the patch name in the <m>loadpatch</m> message.
          </description>
      </method>
      <method name="multithread">
          <arglist>
              <arg name="multithread" type="message" />
          </arglist>
          <digest>
              Switch multithreading on/off
          </digest>
          <description>
              The <m>multithread</m> message followed by an <m>int</m> can be used to switch multithreading on(1)/off(0).
              <br />
              <m>multithread</m> defaults to on unless nested - these default to off
              <br />
              Multithreading will add a small cpu overhead, so in some situations it may not produce any gain. In others the gain will be significant.
          </description>
      </method>
      <method name="open">
          <arglist>
              <arg name="open" type="message" />
          </arglist>
          <digest>
              Open a specific patch window
          </digest>
          <description>
              Sending the <m>open</m> message followed by an <m>int</m> will open that specific patch window from inside <o>dynamicdsp~</o> provided that there is a patch there.
          </description>
      </method>
      <method name="target">
          <arglist>
              <arg name="target" type="message" />
          </arglist>
          <digest>
              Target a specific patch
          </digest>
          <description>
              Similarily to <o>poly~</o>, the <m>target</m> message followed by an <m>int</m> will set inputs to target a specific patch.
              <br />
              default is <m>target</m> <m>0</m> (target all patches).
          </description>
      </method>
      <method name="targetfree">
          <arglist>
              <arg name="targetfree" type="message" />
          </arglist>
          <digest>
              Target a free patch
          </digest>
          <description>
              The <m>targetfree</m> message by itself will set inputs to target any free patch.
              <br />
              <br />
              Up to two <m>ints</m> can follow the message to set specific patches to target when they are free.
              <br/>
              <br/>
              One <m>int</m> sets the maximum patch to target, with the minumum being the first patch.
              <br />
              Ex. <m>targetfree 5</m> targets any free patch between slots 1 and 5 (inclusive).
              <br/>
              <br/>
              Two <m>ints</m> sets the minimum and maximum patches to target.
              <br />
              Ex. <m>targetfree 3 9</m> targets any free patch between slots 3 and 9 (inclusive).
          </description>
      </method>
      <method name="threadmap">
          <arglist>
              <arg name="threadmap" type="message" />
          </arglist>
          <digest>
              Set the thread on which to process a particular patch
          </digest>
          <description>
              The <m>threadmap</m> message is followed by two <m>ints</m>, the first specifies a patch, the second says which thread to process on.
              <br />
              Threads are wrapped around to the number of active threads. This means that a suitable thread map for a larger number of cores should transfer reasonably well to a lower number of threads (but not vice versa).
              <br />
              The default mapping is for each patch to be assigned to a thread of the same number as the slot it is in. Thus each subsequent slot is assigned to be processed on a subsequent thread.
              <br />
              The threadmap can be adjusted in real-time without interrupting audio processing.
          </description>
      </method>
      <method name="wclose">
          <arglist>
              <arg name="wclose" type="message" />
          </arglist>
          <digest>
              Close a specific patch window
          </digest>
          <description>
              Sending the <m>wclose</m> message followed by an <m>int</m> will close that specific patch window provided that it was open.
          </description>
      </method>
  </methodlist>
  
  <attributelist>
      <attribute name="activethreads" get="1" set="1" type="int" size="1">
          <digest>
              Set the number of active threads
          </digest>
          <description>
              An <m>int</m> can be used to set the number of active threads. This is internally limited to the number of cores available on the hardware.
          </description>
      </attribute>
      <attribute name="autoloadbalance" get="1" set="1" type="int" size="1">
          <digest>
              Switch automatic load balancing on/off
          </digest>
          <description>
              An <m>int</m> can be used to switch automatic load balancing on(1)/off(0) (defaults to off).
              <br />
              When on, each patch runs on whichever thread becomes available to process it first. When off, each patch is linked statically to a thread, as determined by the <m>threadmap</m>.
              <br />
              Automatic load balancing has slightly more overhead, but may result in better cpu usage in siuations where the processing load of each patch is varying in an unpredicatble way, or when there are other changing demands on the hardware. The ideal situation is for all threads to be under equal load to give the most efficient use of cpu power.
          </description>
      </attribute>
      <attribute name="target" get="1" set="1" type="int" size="1">
          <digest>
              Target a specific patch
          </digest>
          <description>
              Similarily to <o>poly~</o>, the <m>target</m> attribute will set inputs to target a specific patch.
              <br />
              default is <m>0</m> (target all patches).
          </description>
      </attribute>
      <attribute name="multithread" get="1" set="1" type="int" size="1">
          <digest>
              Switch multithreading on/off
          </digest>
          <description>
              An <m>int</m> can be used to switch multithreading on(1)/off(0).
              <br />
              <m>multithread</m> defaults to on unless nested - these default to off
              <br />
              Multithreading will add a small cpu overhead, so in some situations it may not produce any gain. In others the gain will be significant.
          </description>
      </attribute>
  </attributelist>
  
  <misc name="Output">
    <entry name="signal">
        <description>
            The number of outputs is specified by the signal outputs and message outputs arguments. <m>signals</m> and <m>messages</m> will each have their own outlets instead of sharing like they do with inlets.
            <br />
            The outputs are <m>signals</m>/<m>messages</m> from the patches loaded into <o>dynamicdsp</o> processed in parallel. <o>dynamic.out~</o> and <o>out</o> should be used within the loaded <o>dynamicdsp~</o> patch to determine which outlet to output from.
        </description>
    </entry>
  </misc>
  <seealsolist>
      <seealso name="dynamic.in~" />
      <seealso name="dynamic.out~" />
      <seealso name="dynamic.patch~" />
      <seealso name="dynamic.request~" />
      <seealso name="dynamic.this~" />
      <seealso name="dynamicserial~" />
      <seealso name="in" />
      <seealso name="out" />
  </seealsolist>
  <misc name="Discussion">
    <entry name="Keywords">
      <description>Dynamic Suite</description>
    </entry>
  </misc>
</c74object>
