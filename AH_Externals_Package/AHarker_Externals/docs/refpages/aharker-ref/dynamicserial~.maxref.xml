<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<?xml-stylesheet href='./_c74_ref.xsl' type='text/xsl'?>
<c74object name="dynamicserial~" module="AHarker Externals" category="Dynamic_Suite">
  <digest>
      Dynamic serial audio processing
  </digest>
  <description>
      <o>dynamicserial~</o> is an audio processing object for dynamically loading and managing serially processing audio (or non-audio) patches in realtime, without affecting other patches that are processing. It is related to the <o>dynamicdsp~</o> object and has a similar functionality but is designed for serial rather than parallel processing (and hence is not multithreaded). You can use it to create effects rack type patches. There is an associated set of objects for audio input / output and querying and setting patch state (<o>dynamic.in~</o> / <o>dynamic.out~</o> / <o>dynamic.request~</o> / <o>dynamic.this~</o> / <o>dynamic.patch~</o>).

  </description>
  <objarglist>
      <objarg name="patch_name" optional="1" type="symbol">
          <digest>
              Set default patch
          </digest>
          <description>
              The first argument sets the inital patch to load by setting its name as a <m>symbol</m>. This will only load one instance of the patch.
          </description>
      </objarg>
      <objarg name="inlets/outlets" optional="1" type="list">
          <digest>
              Set the number of inlets and outlets
          </digest>
          <description>
              If you wish to declare a number of inlets /outlets different from the default, the next arguments should be a set of up to 4 ints to set:
              <br />
              number of signal inlets (shared with message inlets)
              <br />
              number of signal outlets
              <br />
              number of message inlets (shared with signal inlets)
              <br />
              number of message outlets
          </description>
      </objarg>
      <objarg name="args" optional="1" type="list">
          <digest>
              Set arguments for the loaded patch
          </digest>
          <description>
              If you wish to provide arguments to the loaded patch then the next argument should be the <m>symbol</m> "args" followed by up to 10 arguments to the patch. These are applied  only to the patch loaded at instantiation.
          </description>
      </objarg>
  </objarglist>
  
  <methodlist>
      <method name="loadpatch">
          <arglist>
              <arg name="loadpatch" type="variable" />
          </arglist>
          <digest>
              Load a patch into a free slot
          </digest>
          <description>
              The <m>loadpatch</m> message is used to load a patch into <o>dynamicserial~</o>. Each patch is loaded into a slot which can be refered to by index number (from 1). The index number of the slot is available within the hosted patch using either the <o>dynamic.this~</o> or <o>dynamic.patch~</o> objects. Patches process in the order they are loaded. Non-processing patches / empty slots pass audio through.
              <br />
              To load a patch into the next free slot, the <m>loadpatch</m> message can be followed by the name of a patch to load as a <m>symbol</m>.
              <br />
              <br />
              An optional <m>int</m> before the name of the patch can be used to specify the slot in which to load the patch (replacing any patch already loaded in that slot).
              <br />
              <br />
              Additional <m>ints</m> can be specified after the name of the patch to pass as arguments to the patch to be loaded.
              <br />
              <br />
              Each slot in <o>dynamicserial~</o> can contain a different patch by changing the patch name in the <m>loadpatch</m> message.
          </description>
      </method>
      <method name="anything">
          <arglist>
              <arg name="anything" type="variable" />
          </arglist>
          <digest>
              Input a message
          </digest>
          <description>
              A <m>message</m> can be sent into any of the <m>message</m> inlets specified by the message inlets argument. This will be sent to all targeted slots in series. The <m>message</m> should be recieved by an <o>in</o> (matching the inlet it was sent to) inside the loaded patch.
          </description>
      </method>
      <method name="bang">
          <arglist>
          </arglist>
          <digest>
              Input a bang
          </digest>
          <description>
              Functions the same as <m>anything</m>
          </description>
      </method>
      <method name="int">
          <arglist>
          </arglist>
          <digest>
              Input a int
          </digest>
          <description>
              Functions the same as <m>anything</m>
          </description>
      </method>
      <method name="float">
          <arglist>
          </arglist>
          <digest>
              Input a float
          </digest>
          <description>
              Functions the same as <m>anything</m>
          </description>
      </method>
      <method name="list">
          <arglist>
          </arglist>
          <digest>
              Input a list
          </digest>
          <description>
              Functions the same as <m>anything</m>
          </description>
      </method>
      <method name="signal">
          <arglist>
          </arglist>
          <digest>
              Input a signal
          </digest>
          <description>
              A <m>signal</m> can be sent into any of the <m>signal</m> inlets specified by the signal inlets argument. This will be sent to all available slots in series. The <m>signal</m> should be recieved by a <o>dynamic.in~</o> or <o>dynamic.request~</o> (matching the inlet it was sent to) inside the loaded patch.
          </description>
      </method>
      <method name="open">
          <arglist>
              <arg name="open" type="int" />
          </arglist>
          <digest>
              Open a specific patch window
          </digest>
          <description>
              Sending the <m>open</m> message followed by an <m>int</m> will open that specific patch window from inside <o>dynamicserial~</o> provided that there is a patch there.
          </description>
      </method>
      <method name="wclose">
          <arglist>
              <arg name="wclose" type="int" />
          </arglist>
          <digest>
              Close a specific patch window
          </digest>
          <description>
              Sending the <m>wclose</m> message followed by an <m>int</m> will close that specific patch window provided that it was open.
          </description>
      </method>
      <method name="deletepatch">
          <arglist>
              <arg name="deletepatch" type="int" />
          </arglist>
          <digest>
              Delete a patch from a specific slot
          </digest>
          <description>
              Sending the <m>deletepatch</m> message followed by an <m>int</m> will delete the patch from that slot within the <o>dynamicserial~</o>.
          </description>
      </method>
      <method name="clear">
          <arglist>
          </arglist>
          <digest>
              Clear all slots
          </digest>
          <description>
              Sending the <m>clear</m> message will clear all the currently occupied slots within the <o>dynamicserial~</o>.
          </description>
      </method>
      <method name="target">
          <arglist>
              <arg name="target" type="int" />
          </arglist>
          <digest>
              Target a specific patch
          </digest>
          <description>
              Similarily to <o>poly~</o>, the <m>target</m> message followed by an <m>int</m> will set inputs to target a specific patch.
              <br />
              default is <m>target</m> <m>0</m> (target all patches).
          </description>
      </method>
      <method name="targetfree">
          <arglist>
              <arg name="targetfree" type="variable" />
          </arglist>
          <digest>
              Target a free patch
          </digest>
          <description>
              The <m>targetfree</m> message by itself will set inputs to target any free patch.
              <br />
              <br />
              Up to two <m>ints</m> can follow the message to set specific patches to target when they are free.
              <br/>
              <br/>
              One <m>int</m> sets the maximum patch to target, with the minumum being the first patch.
              <br />
              Ex. <m>targetfree 5</m> targets any free patch between slots 1 and 5 (inclusive).
              <br/>
              <br/>
              Two <m>ints</m> sets the minimum and maximum patches to target.
              <br />
              Ex. <m>targetfree 3 9</m> targets any free patch between slots 3 and 9 (inclusive).
          </description>
      </method>
  </methodlist>
  
  <attributelist>
      <attribute name="target" get="1" set="1" type="int" size="1">
          <digest>
              Target a specific patch
          </digest>
          <description>
              Similarily to <o>poly~</o>, the <m>target</m> attribute will set inputs to target a specific patch.
              <br />
              default is <m>0</m> (target all patches).
          </description>
      </attribute>
  </attributelist>
  
  <misc name="Output">
    <entry name="signal">
        <description>
            The number of outputs is specified by the signal outputs and message outputs arguments. <m>signals</m> and <m>anything</m> will each have their own outlets instead of sharing like they do with inlets.
            <br/>
            <br/>
            The outputs are <m>signals</m>/<m>anything</m> from the patches loaded into <o>dynamicserial~</o> processed in series in the order they are loaded. <o>dynamic.out~</o> and <o>out</o> should be used within the loaded <o>dynamicserial~</o> patch to determine which outlet to output from.
        </description>
    </entry>
  </misc>
  <seealsolist>
      <seealso name="dynamic.in~" />
      <seealso name="dynamic.out~" />
      <seealso name="dynamic.patch~" />
      <seealso name="dynamic.request~" />
      <seealso name="dynamic.this~" />
      <seealso name="dynamicdsp~" />
      <seealso name="in" />
      <seealso name="out" />
  </seealsolist>
  <misc name="Discussion">
    <entry name="Keywords">
      <description>Dynamic Suite</description>
    </entry>
  </misc>
</c74object>
